knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(library(poppr))
NFH.2016 <- read.genalex("Data/Oly2016NFH_Rounded.csv", ploidy=2) #read
NFW.2017 <- read.genalex("Data/Oly2017NFW_Rounded.csv", ploidy=2)
NF <- read.genalex("Data/Oly2016NFH+2017NFW_Merged.csv", ploidy=2)
summary(NFH.2016)
summary(NFW.2017)
summary(NF)
NFH.2016 <- read.genalex("Data/Oly2016NFH_Rounded.csv", ploidy=2) #read
```{r, warnings=FALSE}
# Import 2016/2017 microsatellite data
# Used the following reference: https://grunwaldlab.github.io/Population_Genetics_in_R/TOC.html
NFH.2016 <- read.genalex("Data/Oly2016NFH_Rounded.csv", ploidy=2) #read
NFW.2017 <- read.genalex("Data/Oly2017NFW_Rounded.csv", ploidy=2)
NF <- read.genalex("Data/Oly2016NFH+2017NFW_Merged.csv", ploidy=2)
summary(NFH.2016)
summary(NFW.2017)
summary(NF)
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(library(poppr))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(library(poppr))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(library(poppr))
# Import 2016/2017 microsatellite data
# Used the following reference: https://grunwaldlab.github.io/Population_Genetics_in_R/TOC.html
NFH.2016 <- read.genalex("Data/Oly2016NFH_Rounded.csv", ploidy=2) #read
NFW.2017 <- read.genalex("Data/Oly2017NFW_Rounded.csv", ploidy=2)
NF <- read.genalex("Data/Oly2016NFH+2017NFW_Merged.csv", ploidy=2)
summary(NFH.2016)
summary(NFW.2017)
summary(NF)
# Import 2016/2017 microsatellite data
# Used the following reference: https://grunwaldlab.github.io/Population_Genetics_in_R/TOC.html
NFH.2016 <- read.genalex("Data/Oly2016NFH_Rounded.csv", ploidy=2) #read
NFW.2017 <- read.genalex("Data/Oly2017NFW_Rounded.csv", ploidy=2)
NF <- read.genalex("Data/Oly2016NFH+2017NFW_Merged.csv", ploidy=2)
summary(NFH.2016)
summary(NFW.2017)
summary(NF)
# Import 2016/2017 microsatellite data
# Used the following reference: https://grunwaldlab.github.io/Population_Genetics_in_R/TOC.html
NFH.2016 <- read.genalex("Data/Oly2016NFH_Rounded.csv", ploidy=2) #read
NFW.2017 <- read.genalex("Data/Oly2017NFW_Rounded.csv", ploidy=2)
NF <- read.genalex("Data/Oly2016NFH+2017NFW_Merged.csv", ploidy=2)
summary(NFH.2016)
summary(NFW.2017) #summary of wild samples
summary(NF) #summary of hatchery and wild combined
info_table(NF, type="missing", plot=TRUE) #see how the missing data is distributed over the 2 populations
mlg.table(NF) #genotype eveness. Result is N=199; MLG=199
NF.pop <- poppr(NF) #summary stats on each population
NF.pop
(NF.pop$N / (NF.pop$N - 1)) * NF.pop$lambda #corrected simpson's index (N/(N-1)) #all different genotypes
poppr(NFW.2017)
library("pegas")
NF.HW <- seppop(NF) %>% lapply(hw.test, B=1000) #all P-values >0.05; do not reject the null that these populations are under HWE.
NF.HW.P <- sapply(test, "[", i=TRUE, j=3) #pvalues of HW chi-squared test for all loci, both pops
library("pegas")
NF
NF.HW <- seppop(NF) %>% lapply(hw.test, B=1000) #all P-values >0.05; do not reject the null that these populations are under HWE.
NF.HW.P <- sapply(test, "[", i=TRUE, j=3) #pvalues of HW chi-squared test for all loci, both pops
NF.HW.P <- sapply(NF.HW, "[", i=TRUE, j=3) #pvalues of HW chi-squared test for all loci, both pops
library("pegas")
NF.HW <- seppop(NF) %>% lapply(hw.test, B=1000) #all P-values >0.05; do not reject the null that these populations are under HWE.
NF.HW
NF.HW.P <- sapply(NF.HW, "[", i=TRUE, j=3) #pvalues of HW chi-squared test for all loci, both pops
NF.HW.P
library("pegas")
NF.HW <- seppop(NF) %>% lapply(hw.test, B=1000) #all P-values >0.05; do not reject the null that these populations are under HWE.
NF.HW
NF.HW.P <- sapply(NF.HW, "[", i=TRUE, j=3) #pvalues of HW chi-squared test for all loci, both pops combined into a dataframe
NF.HW.P
library("magrittr")
NF.ia.H <- ia(popsub(NF, "NFH-2016"), sample=999)
NF.ia.H
NF.ia.W <- ia(popsub(NF, "NFW-2017"), sample=999)
NF.ia.W
NF.W2017.pair <- pair.ia(popsub(NF, "NFW-2017"))
NF.H2016.pair <- pair.ia(popsub(NF, "NFH-2016"))
NF.W2017.pair
NF.W2017.pair <- pair.ia(popsub(NF, "NFW-2017"))
NF.H2016.pair <- pair.ia(popsub(NF, "NFH-2016"))
pair.range <- range(c(NF.W2017.pair, NF.H2016.pair), na.rm=TRUE)
plot(NF.W2017.pair, limits=pair.range)
plot(NF.H2016.pair, limits=pair.range)
NF.W2017.pair <- pair.ia(popsub(NF, "NFW-2017"))
NF.H2016.pair <- pair.ia(popsub(NF, "NFH-2016"))
pair.range <- range(c(NF.W2017.pair, NF.H2016.pair), na.rm=TRUE)
plot(NF.W2017.pair, limits=pair.range)
plot(NF.H2016.pair, limits=pair.range)
?pair.ia()
NF.W2017.pair <- pair.ia(popsub(NF, "NFW-2017"), quiet=T, plot=F)
NF.H2016.pair <- pair.ia(popsub(NF, "NFH-2016"), quiet=T, plot=F)
pair.range <- range(c(NF.W2017.pair, NF.H2016.pair), na.rm=TRUE)
NF.W2017.pair <- pair.ia(popsub(NF, "NFW-2017"), quiet=T, plot=F)
NF.H2016.pair <- pair.ia(popsub(NF, "NFH-2016"), quiet=T, plot=F)
pair.range <- range(c(NF.W2017.pair, NF.H2016.pair), na.rm=TRUE)
plot(NF.W2017.pair, limits=pair.range)
plot(NF.H2016.pair, limits=pair.range)
NF.W2017.pair <- pair.ia(popsub(NF, "NFW-2017"), quiet=T, plot=F)
NF.H2016.pair <- pair.ia(popsub(NF, "NFH-2016"), quiet=T, plot=F)
pair.range <- range(c(NF.W2017.pair, NF.H2016.pair), na.rm=TRUE)
plot(NF.W2017.pair, limits=pair.range, main="NFW-2017 Index of Association Pair Comparison")
plot(NF.H2016.pair, limits=pair.range, main="NFH-2016 Index of Association Pair Comparison")
NF.W2017.pair
NF.W2017.pair <- pair.ia(popsub(NF, "NFW-2017"), quiet=T, plot=F)
NF.H2016.pair <- pair.ia(popsub(NF, "NFH-2016"), quiet=T, plot=F)
pair.range <- range(c(NF.W2017.pair, NF.H2016.pair), na.rm=TRUE)
NF.W2017.pair <- pair.ia(popsub(NF, "NFW-2017"), quiet=F, plot=F)
NF.H2016.pair <- pair.ia(popsub(NF, "NFH-2016"), quiet=F, plot=F)
pair.range <- range(c(NF.W2017.pair, NF.H2016.pair), na.rm=TRUE)
NF.W2017.pair
plot(NF.W2017.pair, limits=pair.range, main="NFW-2017 Index of Association Pair Comparison")
NF.H2016.pair
plot(NF.H2016.pair, limits=pair.range, main="NFH-2016 Index of Association Pair Comparison")
NF.freq
NF.freq.t
View(NF.freq.t)
plot(NF.freq.t)
NF.freq <- rraf(NF, by_pop=TRUE)
NF.freq.t <- t(NF.freq)
plot(NF.freq.t)
NF.freq <- rraf(NF, by_pop=TRUE)
NF.freq.t <- t(NF.freq)
plot(NF.freq.t)
NF.freq.t
NF.freq <- rraf(NF, by_pop=TRUE)
NF.freq.t <- t(NF.freq)
NF.freq.t
plot(NF.freq.t)
knitr::opts_chunk$set(library("adegenet"))
knitr::opts_chunk$set(library("pegas"))
NF.summary <- summary(NF)
NFW.2017.summary <- summary(popsub(NF, "NFW-2017"))
NFW.2017.summary
plot(NFW.2017.summary$Hobs, xlab="Loci number", ylab="Observed Heterozygosity",
main="Observed heterozygosity per locus, NFW 2017")
plot(NFW.2017.summary$Hobs, NFW.2017.summary$Hexp, xlab="Observed Heterozygosity", ylab="Expected Heterozygosity",
main="Expected ~ Observed Heterozygosity per locus, NFW 2017")
bartlett.test(list(NFW.2017.summary$Hexp, NFW.2017.summary$Hobs)) #indicates no difference between mean observed and expected heterozygosity
NFH.2016.summary <- summary(popsub(NF, "NFH-2016"))
NFH.2016.summary
plot(NFH.2016.summary$Hobs, xlab="Loci number", ylab="Observed Heterozygosity",
main="Observed heterozygosity per locus, NFH 2016")
plot(NFH.2016.summary$Hobs, NFH.2016.summary$Hexp, xlab="Observed Heterozygosity", ylab="Expected Heterozygosity",
main="Expected ~ Observed Heterozygosity per locus, NFH 2016")
bartlett.test(list(NFH.2016.summary$Hexp, NFH.2016.summary$Hobs)) #indicates no difference between mean observed and expected heterozygosity
NF.summary <- summary(NF)
NFW.2017.summary <- summary(popsub(NF, "NFW-2017"))
NFW.2017.summary
plot(NFW.2017.summary$Hobs, xlab="Loci number", ylab="Observed Heterozygosity",
main="Observed heterozygosity per locus, NFW 2017")
plot(NFW.2017.summary$Hobs, NFW.2017.summary$Hexp, xlab="Observed Heterozygosity", ylab="Expected Heterozygosity",
main="Expected ~ Observed Heterozygosity per locus, NFW 2017")
bartlett.test(list(NFW.2017.summary$Hexp, NFW.2017.summary$Hobs)) #indicates no difference between mean observed and expected heterozygosity
NFH.2016.summary <- summary(popsub(NF, "NFH-2016"))
NFH.2016.summary
plot(NFH.2016.summary$Hobs, xlab="Loci number", ylab="Observed Heterozygosity",
main="Observed heterozygosity per locus, NFH 2016")
plot(NFH.2016.summary$Hobs, NFH.2016.summary$Hexp, xlab="Observed Heterozygosity", ylab="Expected Heterozygosity",
main="Expected ~ Observed Heterozygosity per locus, NFH 2016")
bartlett.test(list(NFH.2016.summary$Hexp, NFH.2016.summary$Hobs)) #indicates no difference between mean observed and expected heterozygosity
# I need the data as a normal dataframe, so I re-read the data into R as .csv
NF.csv <- read.csv(file="Data/Oly2016NFH+2017NFW_Merged.csv", stringsAsFactors = F)
names(NF.csv) <- NF.csv[2,]
NF.csv <- NF.csv[-1:-2,]
NFW.df <- subset(NF.csv, NF.csv$Population == "NFW-2017") #subset the wild pop
NFH.df <- subset(NF.csv, NF.csv$Population == "NFH-2016") #subset the hatchery pop
NFW.df.1 <- NFW.df[,-1:-2] #remove metadata
NFH.df.1 <- NFH.df[,-1:-2] #remove metadata
allelic.freq <- function(df) {
L=ncol(df)   #how many columns are there?
locus_positions=(2*(unique(round((1:(L-2))/2)))+1)   #find the starting column number for each locus
lnames=colnames(df)                          #locus names, from the header
OUT=list()        #create a null dataset to append allele freqs to
for (x in locus_positions) {                       #begin for loop, to calculate frequencies for each locus
alleles=c(df[,x],df[,x+1])        #For example, combine columns 1 and 2 for locus 1 (two columns because they are diploid)
alleles2=as.data.frame(table(alleles))             #count each allele at locus x
missing=alleles2[which(alleles2[,1]==0),2]          #count missing data at locus x, entered as '0' in this dataset (not used further for simplicity)
alleles3=alleles2[which(!alleles2[,1]==0),]          #remove missing data (otherwise 0 would be counted in total number of alleles)
alleles4=cbind(alleles3,alleles3[,2]/sum(alleles3[,2])) #calculate frequencies
output=cbind(x,lnames[x],alleles4)                        #combine x, locusname, and frequencies
OUT[[x]] <- output
}
OUT.1 <- do.call(rbind, OUT)
colnames(OUT.1) <- c("Number","Locus","allele","count","frequency") #add column headers
return(OUT.1)
}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(library(poppr))
# Import 2016/2017 microsatellite data
# Used the following reference: https://grunwaldlab.github.io/Population_Genetics_in_R/TOC.html
NFH.2016 <- read.genalex("Data/Oly2016NFH_Rounded.csv", ploidy=2) #read
NFW.2017 <- read.genalex("Data/Oly2017NFW_Rounded.csv", ploidy=2)
NF <- read.genalex("Data/Oly2016NFH+2017NFW_Merged.csv", ploidy=2)
summary(NFH.2016)
summary(NFW.2017) #summary of wild samples
summary(NF) #summary of hatchery and wild combined
info_table(NF, type="missing", plot=TRUE) #see how the missing data is distributed over the 2 populations
mlg.table(NF) #genotype eveness. Result is N=199; MLG=199
NF.pop <- poppr(NF) #summary stats on each population
NF.pop
(NF.pop$N / (NF.pop$N - 1)) * NF.pop$lambda #corrected simpson's index (N/(N-1)) #all different genotypes
library("pegas")
NF.HW <- seppop(NF) %>% lapply(hw.test, B=1000) #all P-values >0.05; reject the null that these populations are under HWE
NF.HW
NF.HW.P <- sapply(NF.HW, "[", i=TRUE, j=3) #pvalues of HW chi-squared test for all loci, both pops combined into a dataframe
NF.HW.P
library("magrittr")
NF.ia.H <- ia(popsub(NF, "NFH-2016"), sample=999)
NF.ia.H
NF.ia.W <- ia(popsub(NF, "NFW-2017"), sample=999)
NF.ia.W
NF.W2017.pair <- pair.ia(popsub(NF, "NFW-2017"), quiet=F, plot=F)
NF.H2016.pair <- pair.ia(popsub(NF, "NFH-2016"), quiet=F, plot=F)
pair.range <- range(c(NF.W2017.pair, NF.H2016.pair), na.rm=TRUE)
NF.W2017.pair
plot(NF.W2017.pair, limits=pair.range, main="NFW-2017 Index of Association Pair Comparison")
NF.H2016.pair
plot(NF.H2016.pair, limits=pair.range, main="NFH-2016 Index of Association Pair Comparison")
NF.freq <- rraf(NF, by_pop=TRUE)
NF.freq.t <- t(NF.freq)
NF.freq.t
plot(NF.freq.t)
knitr::opts_chunk$set(library("adegenet"))
knitr::opts_chunk$set(library("pegas"))
NF.summary <- summary(NF)
NFW.2017.summary <- summary(popsub(NF, "NFW-2017"))
NFW.2017.summary
plot(NFW.2017.summary$Hobs, xlab="Loci number", ylab="Observed Heterozygosity",
main="Observed heterozygosity per locus, NFW 2017")
plot(NFW.2017.summary$Hobs, NFW.2017.summary$Hexp, xlab="Observed Heterozygosity", ylab="Expected Heterozygosity",
main="Expected ~ Observed Heterozygosity per locus, NFW 2017")
bartlett.test(list(NFW.2017.summary$Hexp, NFW.2017.summary$Hobs)) #indicates no difference between mean observed and expected heterozygosity
NFH.2016.summary <- summary(popsub(NF, "NFH-2016"))
NFH.2016.summary
plot(NFH.2016.summary$Hobs, xlab="Loci number", ylab="Observed Heterozygosity",
main="Observed heterozygosity per locus, NFH 2016")
plot(NFH.2016.summary$Hobs, NFH.2016.summary$Hexp, xlab="Observed Heterozygosity", ylab="Expected Heterozygosity",
main="Expected ~ Observed Heterozygosity per locus, NFH 2016")
bartlett.test(list(NFH.2016.summary$Hexp, NFH.2016.summary$Hobs)) #indicates no difference between mean observed and expected heterozygosity
# I need the data as a normal dataframe, so I re-read the data into R as .csv
NF.csv <- read.csv(file="Data/Oly2016NFH+2017NFW_Merged.csv", stringsAsFactors = F)
names(NF.csv) <- NF.csv[2,]
NF.csv <- NF.csv[-1:-2,]
NFW.df <- subset(NF.csv, NF.csv$Population == "NFW-2017") #subset the wild pop
NFH.df <- subset(NF.csv, NF.csv$Population == "NFH-2016") #subset the hatchery pop
NFW.df.1 <- NFW.df[,-1:-2] #remove metadata
NFH.df.1 <- NFH.df[,-1:-2] #remove metadata
allelic.freq <- function(df) {
L=ncol(df)   #how many columns are there?
locus_positions=(2*(unique(round((1:(L-2))/2)))+1)   #find the starting column number for each locus
lnames=colnames(df)                          #locus names, from the header
OUT=list()        #create a null dataset to append allele freqs to
for (x in locus_positions) {                       #begin for loop, to calculate frequencies for each locus
alleles=c(df[,x],df[,x+1])        #For example, combine columns 1 and 2 for locus 1 (two columns because they are diploid)
alleles2=as.data.frame(table(alleles))             #count each allele at locus x
missing=alleles2[which(alleles2[,1]==0),2]          #count missing data at locus x, entered as '0' in this dataset (not used further for simplicity)
alleles3=alleles2[which(!alleles2[,1]==0),]          #remove missing data (otherwise 0 would be counted in total number of alleles)
alleles4=cbind(alleles3,alleles3[,2]/sum(alleles3[,2])) #calculate frequencies
output=cbind(x,lnames[x],alleles4)                        #combine x, locusname, and frequencies
OUT[[x]] <- output
}
OUT.1 <- do.call(rbind, OUT)
colnames(OUT.1) <- c("Number","Locus","allele","count","frequency") #add column headers
return(OUT.1)
}
NFH.afreq <- allelic.freq(NFW.df.1)[,-1]
NFW.afreq <- allelic.freq(NFH.df.1)[,-1]
write.table(NFH.afreq,file="Analyses/NFH-2016-Allelefrequencies.txt",row.names=FALSE,col.names=TRUE,sep="\t",append=FALSE)
write.table(NFW.afreq,file="Analyses/NFW-2017-Allelefrequencies.txt",row.names=FALSE,col.names=TRUE,sep="\t",append=FALSE)
Freq.Plots <- function(wanted_locus, frequency_table, population) {
Locus=frequency_table[which(frequency_table[,1]==wanted_locus),]
plot(as.numeric(as.character(Locus[,2])),as.numeric(as.character(Locus[,4])),xlab="Allele",ylab="Frequency",main=paste(population, "_", "Locus_",Locus[1,1]),pch=21,bg="blue",cex=1.5)
plot(1:length(Locus[,2]),sort(as.numeric(as.character(Locus[,4])),decreasing=TRUE),xlab="Allele (orderd by frequency)",ylab="Frequency",main=paste(population, "_", "Locus_",Locus[1,1], sep=""),pch=21,bg="blue",cex=1.5)
}
# Generate plots for NFH-2016 population
loci <- unique(NFH.afreq$Locus)
for (i in 1:length(loci)) {
path <- file.path(paste("Analyses/", "FreqPlots_NFH-2016_", loci[i], ".pdf", sep = ""))
pdf(file=path)
Freq.Plots(loci[i], NFH.afreq, "NFH-2016")
dev.off()
}
Freq.Plots(loci[i], NFH.afreq, "NFH-2016")
# Generate plots for NFH-2016 population
loci <- unique(NFH.afreq$Locus)
for (i in 1:length(loci)) {
path <- file.path(paste("Analyses/", "FreqPlots_NFH-2016_", loci[i], ".pdf", sep = ""))
pdf(file=path)
Freq.Plots(loci[i], NFH.afreq, "NFH-2016")
dev.off()
}
# Here are example plots:
Freq.Plots("Olur19", NFH.afreq, "NFH-2016")
# Generate plots for NFW-2017 population
loci <- unique(NFW.afreq$Locus)
for (i in 1:length(loci)) {
path <- file.path(paste("Analyses/", "FreqPlots_NFW-2017_", loci[i], ".pdf", sep = ""))
pdf(file=path)
Freq.Plots(loci[i], NFW.afreq, "NFW-2017")
dev.off()
}
# Here are example plots:
Freq.Plots("Olur19", NFW.afreq, "NFW-2017")
# ---- Use PopGen package for more stats ---#
install.packages("PopGenReport")
NFH.2016
NFW.2017
library(PopGenReport)
null.all(NFH.2016)
NFH.2016
test <- read.loci("Data/Oly2016NFH_Rounded.csv", ploidy=2)
?read.loci()
test <- read.loci("Data/Oly2016NFH_Rounded.csv")
library(PopGenReport)
test <- read.loci("Data/Oly2016NFH_Rounded.csv")
?read.loci()
test <- read.genetix("Data/Oly2016NFH_Rounded.csv")
library(pegas)
test <- read.loci("Data/Oly2016NFH_Rounded.csv")
test
test <- read.loci("Data/Oly2016NFH_Rounded.csv", header=T, loci.sep=",")
test
test <- read.loci("Data/Oly2016NFH_Rounded.csv", header=T, allele.sep=",")
test
test <- read.loci("Data/Oly2016NFH_Rounded.csv", header=T)
test
print(test, TRUE)
NFH.2016
?read.genalex
NFH.2016 <- read.genalex("Data/Oly2016NFH_Rounded.csv", ploidy=2, genclone=FALSE)
NFW.2017 <- read.genalex("Data/Oly2017NFW_Rounded.csv", ploidy=2, genclone=FALSE)
NF <- read.genalex("Data/Oly2016NFH+2017NFW_Merged.csv", ploidy=2, genclone=FALSE)
summary(NFH.2016)
summary(NFW.2017) #summary of wild samples
# Have we sampled enough loci?
NFH.2016.acccurve <- genotype_curve(NFH.2016, sample=1000, quiet=T)
NFH.2016.acccurve
NFW.2017.acccurve <- genotype_curve(NFW.2017, sample=1000, quiet=T)
NF.acccurve <- genotype_curve(NF, sample=1000, quiet=T)
NF
NFW.2017
NFH.2016
# Summary stats on # alleles
NFH.2016.table <- locus_table(NFH.2016) #mean # alleles = 18.67
NFW.2017.table <- locus_table(NFW.2017) #mean # alleles = 19.33
NF.table <- locus_table(NF)
NF.table
NFH.2016.table
NFW.2017.table
info_table(NF, type="missing", plot=TRUE) #see how the missing data is distributed over the 2 populations
mlg.table(NF) #genotype eveness. Result is N=199; MLG=199
NF.pop <- poppr(NF) #summary stats on each population
(NF.pop$N / (NF.pop$N - 1)) * NF.pop$lambda #corrected simpson's index (N/(N-1)) #all different genotypes
NF.pop
NF.HW <- seppop(NF) %>% lapply(hw.test, B=1000) #all P-values >0.05; do not reject the null that these populations are under HWE.
NF.HW.P <- sapply(test, "[", i=TRUE, j=3) #pvalues of HW chi-squared test for all loci, both pops
NF.HW.P <- sapply(test, "[", i=TRUE, j=3) #pvalues of HW chi-squared test for all loci, both pops
NF.HW.P <- sapply(NF.HW , "[", i=TRUE, j=3) #pvalues of HW chi-squared test for all loci, both pops
NF.HW.P
NF.ia.H <- ia(popsub(NF, "NFH-2016"), sample=999)
NF.ia.W <- ia(popsub(NF, "NFW-2017"), sample=999)
#which loci are linked? run pairwise assessment:
NF.W2017.pair <- pair.ia(popsub(NF, "NFW-2017"))
NF.H2016.pair <- pair.ia(popsub(NF, "NFH-2016"))
pair.range <- range(c(NF.W2017.pair, NF.H2016.pair), na.rm=TRUE)
plot(NF.W2017.pair, limits=pair.range)
plot(NF.H2016.pair, limits=pair.range)
NF.W2017.pair
NF.H2016.pair
NF.freq <- rraf(NF, by_pop=TRUE)
NF.freq.t <- t(NF.freq)
plot(NF.freq.t)
NF.summary <- summary(NF)
NF.summary
NFW.2017.summary <- summary(popsub(NF, "NFW-2017"))
NFW.2017.summary
plot(NFW.2017.summary$Hobs, xlab="Loci number", ylab="Observed Heterozygosity",
main="Observed heterozygosity per locus, NFW 2017")
plot(NFW.2017.summary$Hobs, NFW.2017.summary$Hexp, xlab="Observed Heterozygosity", ylab="Expected Heterozygosity",
main="Expected ~ Observed Heterozygosity per locus, NFW 2017")
bartlett.test(list(NFW.2017.summary$Hexp, NFW.2017.summary$Hobs)) #indicates no difference between mean observed and expected heterozygosity
NFH.2016.summary <- summary(popsub(NF, "NFH-2016"))
NFH.2016.summary
plot(NFH.2016.summary$Hobs, xlab="Loci number", ylab="Observed Heterozygosity",
main="Observed heterozygosity per locus, NFH 2016")
plot(NFH.2016.summary$Hobs, NFH.2016.summary$Hexp, xlab="Observed Heterozygosity", ylab="Expected Heterozygosity",
main="Expected ~ Observed Heterozygosity per locus, NFH 2016")
bartlett.test(list(NFH.2016.summary$Hexp, NFH.2016.summary$Hobs)) #indicates no difference between mean observed and expected heterozygosity
null.all(NFH.2016)
NF
NF.null <- null.all(NF) # are there null alleles in this dataset?
NF.null$homozygotes
NF.null$null.allele.freq
plot(NF.null$null.allele.freq)
popgenreport(NF, mk.counts=T)
getwd()
setwd("~/Documents/Roberts Lab/O.lurida_genetics/Analyses")
test <- popgenreport(NF, mk.locihz=T, mk.pdf=F)
test
# Calculate allelic richness
allel.rich(NF, min.alleles = 1)
# Calculate allelic richness using PopGenReport program (https://cran.r-project.org/web/packages/PopGenReport/PopGenReport.pdf)
allel.rich(NF, min.alleles = NULL)
allele.dist(NF)
pairwise.fstb(NF)
View(NF)
NFW.df
pairwise.fstb(NF)
gd.smouse(NF, verbose=TRUE)
test <- gd.smouse(NF, verbose=TRUE)
View(test)
str(test)
summary(test)
test
null.all(NF)
test <- null.all(NF)
str(test)
test$null.allele.freq$summary2
# The values of Fst range from 0 to 1. 0 implies complete panmixis; that is, that the two populations are interbreeding freely. 1 implies that all genetic variation is explained by the population structure, and that the two populations do not share any genetic diversity.
NF.null
NF.null <- null.all(NF)
NF.null$null.allele.freq$summary2
NF.null$homozygotes$overall
NF.null$homozygotes$probability.obs
NF.null$homozygotes$overall
plot(NF.null$homozygotes$overall$distribution)
hist(NF.null$homozygotes$overall$distribution)
NF.null$homozygotes$overall$distribution
NF.null$homozygotes$overall
NF.null$homozygotes$overall$observed
NFW.2017.null <- null.all(NFW.2017)
NFH.2016.null <- null.all(NFH.2016)
NFW.2017.null$homozygotes$overall$observed
NFH.2016.null$homozygotes$overall$observed
NF.null$homozygotes$overall$observed
NFW.2017.null$null.allele.freq$summary2
NFH.2016.null$null.allele.freq$summary2
install.packages("polysat")
library(polysat)
summary(NFH.2016)
str(NFH.2016)
NFH.2016$loc.fac
NFH.2016$loc.n.all
NFH.2016$tab
NFH.2016$strata
NFH.2016$pop
summary(NFH.2016)
PIC(NF)
NF.freq
NFH.afreq
PIC(NFH.afreq)
NFW.df.1
NFH.df.1
PIC(NFW.df.1)
NFW.df
NFW.df[,-1:-2]
PIC(NFW.df, pops = NFH.df$Population)
PIC(NFW.df)
NFW.df
PIC(NFW.df)
NFW.df
NFH.afreq
PIC(NFH.afreq, loci=NFH.afreq$Locus)
PIC(NFH.afreq$frequency, loci=NFH.afreq$Locus)
PIC(NFH.afreq[,-3], loci=NFH.afreq$Locus)
NFH.df
NFH.afreq
NFW.2017.null$homozygotes$overall$observed
NFH.2016.null$homozygotes$overall$observed
NFW.2017.null
NFW.2017.null$homozygotes$overall$observed
NFH.2016.null$homozygotes$overall$observed
NFW.2017.null$null.allele.freq$summary2
NFH.2016.null$null.allele.freq$summary2
pairwise.fstb(NF)
install.packages("genepop")
library(genepop)
getwd
getwd()
basic_info("../data/Oly2016NFH_Rounded.csv")
basic_info("../data/Oly2016NFH_Rounded.csv", verbose=T)
basic_info("../data/Oly2016NFH_Rounded.txt", verbose=T)
basic_info("../data/Oly2016NFH_Rounded.txt", verbose=T)
?read.genalex()
basic_info("../data/Oly2016NFH+2017NFW_Merged.txt", verbose=T)
?basic_info()
genedivFis(inputFile="../Data/Oly2016NFH+2017NFW_Merged.txt", sizes=FALSE, outputFile = "../Analyses/NF-HWE.txt", dataType = "Diploid", verbose=interactive())
genedivFis(inputFile="../Data/Oly2016NFH+2017NFW_Merged.txt", sizes=FALSE, outputFile = "../Analyses/NF-Fis.txt", dataType = "Diploid", verbose=interactive())
?data()
?data("../Data/Oly2016NFH+2017NFW_Merged.txt")
data("../Data/Oly2016NFH+2017NFW_Merged.txt")
NF.test <- data("../Data/Oly2016NFH+2017NFW_Merged.txt")
data("../Data/Oly2016NFH+2017NFW_Merged.txt")
getwd()
test_HW(inputFile = "../Data/Oly2016NFH+2017NFW_Merged.txt", which="Proba", outputFile = "../Analyses/NF-HWE.txt", enumeration = FALSE, dememorization = 10000, batches = 100,
iterations = 1000, verbose = interactive())
test_LD(inputFile = "../Data/Oly2016NFH+2017NFW_Merged.txt", outputFile = "../Analyses/NF-LD.txt", dememorization = 10000, batches = 100, iterations = 1000, verbose = TRUE)
nulls(inputFile = "../Data/Oly2016NFH+2017NFW_Merged.txt", outputFile = "../Analyses/NF-null.txt", nullAlleleMethod = "B96", CIcoverage = 0.95, verbose = TRUE)
Fst(inputFile = "../Data/Oly2016NFH+2017NFW_Merged.txt", outputFile = "../Analyses/NF-Fst.txt", sizes=TRUE, pairs=TRUE, dataType="Diploid", verbose = TRUE)
Fst(inputFile = "../Data/Oly2016NFH+2017NFW_Merged.txt", outputFile = "../Analyses/NF-Fst.txt", sizes=F, pairs=TRUE, dataType="Diploid", verbose = TRUE)
test_diff(inputFile = "../Data/Oly2016NFH+2017NFW_Merged.txt", outputFile = "../Analyses/NF-Diff.txt", genic=FALSE, pairs=TRUE, dememorization = 10000, batches = 100, iterations = 1000, verbose = TRUE)
test_diff(inputFile = "../Data/Oly2016NFH+2017NFW_Merged.txt", outputFile = "../Analyses/NF-Diff.txt", genic=TRUE, pairs=TRUE, dememorization = 10000, batches = 100, iterations = 1000, verbose = TRUE)
test_diff(inputFile = "../Data/Oly2016NFH+2017NFW_Merged.txt", outputFile = "../Analyses/NF-Diff.txt", genic=FALSE, pairs=FALSE, dememorization = 10000, batches = 100, iterations = 1000, verbose = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# install.packages("genepop")
knitr::opts_chunk$set(library(genepop))
# install.packages("genepop")
knitr::opts_chunk$set(library(genepop))
sessionInfo()
