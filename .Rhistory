alleles3=alleles2[which(!alleles2[,1]==0),]          #remove missing data (otherwise 0 would be counted in total number of alleles)
alleles3
alleles4=cbind(alleles3,alleles3[,2]/sum(alleles3[,2])) #calculate frequencies
alleles4
output=cbind(x,lnames[x],alleles4)                        #combine x, locusname, and frequencies
output
OUT <- rbind(OUT,output)
OUT
colnames(OUT) <- c("Number","Locus","allele","count","frequency") #add column headers
OUT=NULL        #create a null dataset to append allele freqs to
for (x in locus_positions) {                       #begin for loop, to calculate frequencies for each locus
alleles=c(df[,x],df[,x+1])        #For example, combine columns 1 and 2 for locus 1 (two columns because they are diploid)
alleles2=as.data.frame(table(alleles))             #count each allele at locus x
missing=alleles2[which(alleles2[,1]==0),2]          #count missing data at locus x, entered as '0' in this dataset (not used further for simplicity)
alleles3=alleles2[which(!alleles2[,1]==0),]          #remove missing data (otherwise 0 would be counted in total number of alleles)
alleles4=cbind(alleles3,alleles3[,2]/sum(alleles3[,2])) #calculate frequencies
output=cbind(x,lnames[x],alleles4)                        #combine x, locusname, and frequencies
OUT <- rbind(OUT,output)
colnames(OUT) <- c("Number","Locus","allele","count","frequency") #add column headers
}
for (x in locus_positions) {                       #begin for loop, to calculate frequencies for each locus
alleles=c(df[,x],df[,x+1])        #For example, combine columns 1 and 2 for locus 1 (two columns because they are diploid)
alleles2=as.data.frame(table(alleles))             #count each allele at locus x
missing=alleles2[which(alleles2[,1]==0),2]          #count missing data at locus x, entered as '0' in this dataset (not used further for simplicity)
alleles3=alleles2[which(!alleles2[,1]==0),]          #remove missing data (otherwise 0 would be counted in total number of alleles)
alleles4=cbind(alleles3,alleles3[,2]/sum(alleles3[,2])) #calculate frequencies
output=cbind(x,lnames[x],alleles4)                        #combine x, locusname, and frequencies
OUT <- rbind(OUT,output)
}
alleles
alleles2
L=ncol(df)   #how many columns are there?
df
locus_positions=(2*(unique(round((1:(L-2))/2)))+1)   #find the starting column number for each locus
lnames=colnames(df)                          #locus names, from the header
OUT=list()        #create a null dataset to append allele freqs to
for (x in locus_positions) {                       #begin for loop, to calculate frequencies for each locus
alleles=c(df[,x],df[,x+1])        #For example, combine columns 1 and 2 for locus 1 (two columns because they are diploid)
alleles2=as.data.frame(table(alleles))             #count each allele at locus x
missing=alleles2[which(alleles2[,1]==0),2]          #count missing data at locus x, entered as '0' in this dataset (not used further for simplicity)
alleles3=alleles2[which(!alleles2[,1]==0),]          #remove missing data (otherwise 0 would be counted in total number of alleles)
alleles4=cbind(alleles3,alleles3[,2]/sum(alleles3[,2])) #calculate frequencies
output=cbind(x,lnames[x],alleles4)                        #combine x, locusname, and frequencies
OUT[[i]] <- output
}
for (x in locus_positions) {                       #begin for loop, to calculate frequencies for each locus
alleles=c(df[,x],df[,x+1])        #For example, combine columns 1 and 2 for locus 1 (two columns because they are diploid)
alleles2=as.data.frame(table(alleles))             #count each allele at locus x
missing=alleles2[which(alleles2[,1]==0),2]          #count missing data at locus x, entered as '0' in this dataset (not used further for simplicity)
alleles3=alleles2[which(!alleles2[,1]==0),]          #remove missing data (otherwise 0 would be counted in total number of alleles)
alleles4=cbind(alleles3,alleles3[,2]/sum(alleles3[,2])) #calculate frequencies
output=cbind(x,lnames[x],alleles4)                        #combine x, locusname, and frequencies
OUT[[x]] <- output
}
OUT.1 <- do.call(rbind, OUT)
OUT.1
colnames(OUT.1) <- c("Number","Locus","allele","count","frequency") #add column headers
colnames(OUT.1) <- c("Number","Locus","allele","count","frequency") #add column headers
return(OUT.1)
rm(df)
allelic.freq <- function(df) {
L=ncol(df)   #how many columns are there?
locus_positions=(2*(unique(round((1:(L-2))/2)))+1)   #find the starting column number for each locus
lnames=colnames(df)                          #locus names, from the header
OUT=list()        #create a null dataset to append allele freqs to
for (x in locus_positions) {                       #begin for loop, to calculate frequencies for each locus
alleles=c(df[,x],df[,x+1])        #For example, combine columns 1 and 2 for locus 1 (two columns because they are diploid)
alleles2=as.data.frame(table(alleles))             #count each allele at locus x
missing=alleles2[which(alleles2[,1]==0),2]          #count missing data at locus x, entered as '0' in this dataset (not used further for simplicity)
alleles3=alleles2[which(!alleles2[,1]==0),]          #remove missing data (otherwise 0 would be counted in total number of alleles)
alleles4=cbind(alleles3,alleles3[,2]/sum(alleles3[,2])) #calculate frequencies
output=cbind(x,lnames[x],alleles4)                        #combine x, locusname, and frequencies
OUT[[x]] <- output
}
OUT.1 <- do.call(rbind, OUT)
colnames(OUT.1) <- c("Number","Locus","allele","count","frequency") #add column headers
return(OUT.1)
}
NFH.afreq <- allelic.freq(NFW.df.1)
NFH.afreq
NFW.afreq <- allelic.freq(NFH.df.1)
NFW.afreq
View(NFH.afreq)
OUT[,-1]
OUT[[,-1]]
allelic.freq <- function(df) {
L=ncol(df)   #how many columns are there?
locus_positions=(2*(unique(round((1:(L-2))/2)))+1)   #find the starting column number for each locus
lnames=colnames(df)                          #locus names, from the header
OUT=list()        #create a null dataset to append allele freqs to
for (x in locus_positions) {                       #begin for loop, to calculate frequencies for each locus
alleles=c(df[,x],df[,x+1])        #For example, combine columns 1 and 2 for locus 1 (two columns because they are diploid)
alleles2=as.data.frame(table(alleles))             #count each allele at locus x
missing=alleles2[which(alleles2[,1]==0),2]          #count missing data at locus x, entered as '0' in this dataset (not used further for simplicity)
alleles3=alleles2[which(!alleles2[,1]==0),]          #remove missing data (otherwise 0 would be counted in total number of alleles)
alleles4=cbind(alleles3,alleles3[,2]/sum(alleles3[,2])) #calculate frequencies
output=cbind(x,lnames[x],alleles4)                        #combine x, locusname, and frequencies
OUT[[x]] <- output
}
OUT.1 <- do.call(rbind, OUT)
colnames(OUT.1) <- c("Number","Locus","allele","count","frequency") #add column headers
return(OUT.1)
}
NFH.afreq <- allelic.freq(NFW.df.1)
NFW.afreq <- allelic.freq(NFH.df.1)
alleles4
allelic.freq(NFW.df.1)[,-1]
NFH.afreq <- allelic.freq(NFW.df.1)[,-1]
NFW.afreq <- allelic.freq(NFH.df.1)[,-1]
NFW.afreq
write.table(NFH.afreq,file="Analyses/NFH-2016-Allelefrequencies.txt",row.names=FALSE,col.names=TRUE,sep="\t",append=FALSE)
write.table(NFW.afreq,file="Analyses/NFW-2017-Allelefrequencies.txt",row.names=FALSE,col.names=TRUE,sep="\t",append=FALSE)
test <- function(wanted_locus, frequency_table) {
Locus=frequency_table[which(frequency_table[,1]==wanted_locus),]
plot(as.numeric(as.character(Locus[,2])),as.numeric(as.character(Locus[,4])),xlab="Allele",ylab="Frequency",main=paste("Locus_",Locus[1,1]),pch=21,bg="blue",cex=1.5)
plot(1:length(Locus[,2]),sort(as.numeric(as.character(Locus[,4])),decreasing=TRUE),xlab="Allele (orderd by frequency)",ylab="Frequency",main=paste("Locus_",Locus[1,1]),pch=21,bg="blue",cex=1.5)
}
test("Olur10", NFH.afreq)
test("Olur19", NFH.afreq)
Freq.Plots <- function(wanted_locus, frequency_table) {
Locus=frequency_table[which(frequency_table[,1]==wanted_locus),]
plot(as.numeric(as.character(Locus[,2])),as.numeric(as.character(Locus[,4])),xlab="Allele",ylab="Frequency",main=paste("Locus_",Locus[1,1]),pch=21,bg="blue",cex=1.5)
plot(1:length(Locus[,2]),sort(as.numeric(as.character(Locus[,4])),decreasing=TRUE),xlab="Allele (orderd by frequency)",ylab="Frequency",main=paste("Locus_",Locus[1,1]),pch=21,bg="blue",cex=1.5)
}
lnames
unique(NFH.afreq)
unique(NFH.afreq$Locus)
length(unique(NFH.afreq$Locus))
NFH.afreq[1]
unique(NFH.afreq$Locus)
loci <- unique(NFH.afreq$Locus)
length(loci)
loci
loci[1]
Freq.Plots <- function(wanted_locus, frequency_table) {
Locus=frequency_table[which(frequency_table[,1]==wanted_locus),]
plot(as.numeric(as.character(Locus[,2])),as.numeric(as.character(Locus[,4])),xlab="Allele",ylab="Frequency",main=paste("Locus_",Locus[1,1]),pch=21,bg="blue",cex=1.5)
plot(1:length(Locus[,2]),sort(as.numeric(as.character(Locus[,4])),decreasing=TRUE),xlab="Allele (orderd by frequency)",ylab="Frequency",main=paste("Locus_",Locus[1,1]),pch=21,bg="blue",cex=1.5)
}
loci <- unique(NFH.afreq$Locus)
for (i in 1:length(loci)) {
Freq.Plots(loci[i], NFH.afreq)
}
Freq.Plots <- function(wanted_locus, frequency_table, population) {
Locus=frequency_table[which(frequency_table[,1]==wanted_locus),]
plot(as.numeric(as.character(Locus[,2])),as.numeric(as.character(Locus[,4])),xlab="Allele",ylab="Frequency",main=paste("Locus_",Locus[1,1]),pch=21,bg="blue",cex=1.5)
plot(1:length(Locus[,2]),sort(as.numeric(as.character(Locus[,4])),decreasing=TRUE),xlab="Allele (orderd by frequency)",ylab="Frequency",main=paste("Locus_",Locus[1,1], "-", population, sep=""),pch=21,bg="blue",cex=1.5)
}
loci <- unique(NFH.afreq$Locus)
for (i in 1:length(loci)) {
Freq.Plots(loci[i], NFH.afreq, "NFH-2016")
}
Freq.Plots <- function(wanted_locus, frequency_table, population) {
Locus=frequency_table[which(frequency_table[,1]==wanted_locus),]
plot(as.numeric(as.character(Locus[,2])),as.numeric(as.character(Locus[,4])),xlab="Allele",ylab="Frequency",main=paste("Locus_",Locus[1,1]),pch=21,bg="blue",cex=1.5)
plot(1:length(Locus[,2]),sort(as.numeric(as.character(Locus[,4])),decreasing=TRUE),xlab="Allele (orderd by frequency)",ylab="Frequency",main=paste(population, "_", "Locus_",Locus[1,1], sep=""),pch=21,bg="blue",cex=1.5)
loci <- unique(frequency_table$Locus)
for (i in 1:length(loci)) {
Freq.Plots(loci[i], NFH.afreq, "NFH-2016")
}
}
Freq.Plots <- function(wanted_locus, frequency_table, population) {
Locus=frequency_table[which(frequency_table[,1]==wanted_locus),]
plot(as.numeric(as.character(Locus[,2])),as.numeric(as.character(Locus[,4])),xlab="Allele",ylab="Frequency",main=paste("Locus_",Locus[1,1]),pch=21,bg="blue",cex=1.5)
plot(1:length(Locus[,2]),sort(as.numeric(as.character(Locus[,4])),decreasing=TRUE),xlab="Allele (orderd by frequency)",ylab="Frequency",main=paste(population, "_", "Locus_",Locus[1,1], sep=""),pch=21,bg="blue",cex=1.5)
}
loci <- unique(NFH.afreq$Locus)
for (i in 1:length(loci)) {
Freq.Plots(loci[i], NFH.afreq, "NFH-2016")
}
loci <- unique(NFH.afreq$Locus)
paste("Analyses/", "NFH-2016", loci[i], ".png", sep = "")
paste("Analyses/", "NFH-2016", loci[i], ".pdf", sep = "")
paste("Analyses/", "FreqPlots_NFH-2016_", loci[i], ".pdf", sep = "")
loci <- unique(NFH.afreq$Locus)
for (i in 1:length(loci)) {
path <- file.path(paste("Analyses/", "FreqPlots_NFH-2016_", loci[i], ".pdf", sep = ""))
pdf(file=mypath)
Freq.Plots(loci[i], NFH.afreq, "NFH-2016")
dev.off()
}
for (i in 1:length(loci)) {
path <- file.path(paste("Analyses/", "FreqPlots_NFH-2016_", loci[i], ".pdf", sep = ""))
pdf(file=path)
Freq.Plots(loci[i], NFH.afreq, "NFH-2016")
dev.off()
}
Freq.Plots <- function(wanted_locus, frequency_table, population) {
Locus=frequency_table[which(frequency_table[,1]==wanted_locus),]
plot(as.numeric(as.character(Locus[,2])),as.numeric(as.character(Locus[,4])),xlab="Allele",ylab="Frequency",main=paste(population, "_", "Locus_",Locus[1,1]),pch=21,bg="blue",cex=1.5)
plot(1:length(Locus[,2]),sort(as.numeric(as.character(Locus[,4])),decreasing=TRUE),xlab="Allele (orderd by frequency)",ylab="Frequency",main=paste(population, "_", "Locus_",Locus[1,1], sep=""),pch=21,bg="blue",cex=1.5)
}
for (i in 1:length(loci)) {
path <- file.path(paste("Analyses/", "FreqPlots_NFH-2016_", loci[i], ".pdf", sep = ""))
pdf(file=path)
Freq.Plots(loci[i], NFH.afreq, "NFH-2016")
dev.off()
}
# Generate plots for NFW-2017 population
loci <- unique(NFW.afreq$Locus)
for (i in 1:length(loci)) {
path <- file.path(paste("Analyses/", "FreqPlots_NFW-2017_", loci[i], ".pdf", sep = ""))
pdf(file=path)
Freq.Plots(loci[i], NFW.afreq, "NFW-2017")
dev.off()
}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(library(poppr))
NFH.2016 <- read.genalex("Data/Oly2016NFH_Rounded.csv", ploidy=2) #read
NFW.2017 <- read.genalex("Data/Oly2017NFW_Rounded.csv", ploidy=2)
NF <- read.genalex("Data/Oly2016NFH+2017NFW_Merged.csv", ploidy=2)
summary(NFH.2016)
summary(NFW.2017)
summary(NF)
NFH.2016 <- read.genalex("Data/Oly2016NFH_Rounded.csv", ploidy=2) #read
```{r, warnings=FALSE}
# Import 2016/2017 microsatellite data
# Used the following reference: https://grunwaldlab.github.io/Population_Genetics_in_R/TOC.html
NFH.2016 <- read.genalex("Data/Oly2016NFH_Rounded.csv", ploidy=2) #read
NFW.2017 <- read.genalex("Data/Oly2017NFW_Rounded.csv", ploidy=2)
NF <- read.genalex("Data/Oly2016NFH+2017NFW_Merged.csv", ploidy=2)
summary(NFH.2016)
summary(NFW.2017)
summary(NF)
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(library(poppr))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(library(poppr))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(library(poppr))
# Import 2016/2017 microsatellite data
# Used the following reference: https://grunwaldlab.github.io/Population_Genetics_in_R/TOC.html
NFH.2016 <- read.genalex("Data/Oly2016NFH_Rounded.csv", ploidy=2) #read
NFW.2017 <- read.genalex("Data/Oly2017NFW_Rounded.csv", ploidy=2)
NF <- read.genalex("Data/Oly2016NFH+2017NFW_Merged.csv", ploidy=2)
summary(NFH.2016)
summary(NFW.2017)
summary(NF)
# Import 2016/2017 microsatellite data
# Used the following reference: https://grunwaldlab.github.io/Population_Genetics_in_R/TOC.html
NFH.2016 <- read.genalex("Data/Oly2016NFH_Rounded.csv", ploidy=2) #read
NFW.2017 <- read.genalex("Data/Oly2017NFW_Rounded.csv", ploidy=2)
NF <- read.genalex("Data/Oly2016NFH+2017NFW_Merged.csv", ploidy=2)
summary(NFH.2016)
summary(NFW.2017)
summary(NF)
# Import 2016/2017 microsatellite data
# Used the following reference: https://grunwaldlab.github.io/Population_Genetics_in_R/TOC.html
NFH.2016 <- read.genalex("Data/Oly2016NFH_Rounded.csv", ploidy=2) #read
NFW.2017 <- read.genalex("Data/Oly2017NFW_Rounded.csv", ploidy=2)
NF <- read.genalex("Data/Oly2016NFH+2017NFW_Merged.csv", ploidy=2)
summary(NFH.2016)
summary(NFW.2017) #summary of wild samples
summary(NF) #summary of hatchery and wild combined
info_table(NF, type="missing", plot=TRUE) #see how the missing data is distributed over the 2 populations
mlg.table(NF) #genotype eveness. Result is N=199; MLG=199
NF.pop <- poppr(NF) #summary stats on each population
NF.pop
(NF.pop$N / (NF.pop$N - 1)) * NF.pop$lambda #corrected simpson's index (N/(N-1)) #all different genotypes
poppr(NFW.2017)
library("pegas")
NF.HW <- seppop(NF) %>% lapply(hw.test, B=1000) #all P-values >0.05; do not reject the null that these populations are under HWE.
NF.HW.P <- sapply(test, "[", i=TRUE, j=3) #pvalues of HW chi-squared test for all loci, both pops
library("pegas")
NF
NF.HW <- seppop(NF) %>% lapply(hw.test, B=1000) #all P-values >0.05; do not reject the null that these populations are under HWE.
NF.HW.P <- sapply(test, "[", i=TRUE, j=3) #pvalues of HW chi-squared test for all loci, both pops
NF.HW.P <- sapply(NF.HW, "[", i=TRUE, j=3) #pvalues of HW chi-squared test for all loci, both pops
library("pegas")
NF.HW <- seppop(NF) %>% lapply(hw.test, B=1000) #all P-values >0.05; do not reject the null that these populations are under HWE.
NF.HW
NF.HW.P <- sapply(NF.HW, "[", i=TRUE, j=3) #pvalues of HW chi-squared test for all loci, both pops
NF.HW.P
library("pegas")
NF.HW <- seppop(NF) %>% lapply(hw.test, B=1000) #all P-values >0.05; do not reject the null that these populations are under HWE.
NF.HW
NF.HW.P <- sapply(NF.HW, "[", i=TRUE, j=3) #pvalues of HW chi-squared test for all loci, both pops combined into a dataframe
NF.HW.P
library("magrittr")
NF.ia.H <- ia(popsub(NF, "NFH-2016"), sample=999)
NF.ia.H
NF.ia.W <- ia(popsub(NF, "NFW-2017"), sample=999)
NF.ia.W
NF.W2017.pair <- pair.ia(popsub(NF, "NFW-2017"))
NF.H2016.pair <- pair.ia(popsub(NF, "NFH-2016"))
NF.W2017.pair
NF.W2017.pair <- pair.ia(popsub(NF, "NFW-2017"))
NF.H2016.pair <- pair.ia(popsub(NF, "NFH-2016"))
pair.range <- range(c(NF.W2017.pair, NF.H2016.pair), na.rm=TRUE)
plot(NF.W2017.pair, limits=pair.range)
plot(NF.H2016.pair, limits=pair.range)
NF.W2017.pair <- pair.ia(popsub(NF, "NFW-2017"))
NF.H2016.pair <- pair.ia(popsub(NF, "NFH-2016"))
pair.range <- range(c(NF.W2017.pair, NF.H2016.pair), na.rm=TRUE)
plot(NF.W2017.pair, limits=pair.range)
plot(NF.H2016.pair, limits=pair.range)
?pair.ia()
NF.W2017.pair <- pair.ia(popsub(NF, "NFW-2017"), quiet=T, plot=F)
NF.H2016.pair <- pair.ia(popsub(NF, "NFH-2016"), quiet=T, plot=F)
pair.range <- range(c(NF.W2017.pair, NF.H2016.pair), na.rm=TRUE)
NF.W2017.pair <- pair.ia(popsub(NF, "NFW-2017"), quiet=T, plot=F)
NF.H2016.pair <- pair.ia(popsub(NF, "NFH-2016"), quiet=T, plot=F)
pair.range <- range(c(NF.W2017.pair, NF.H2016.pair), na.rm=TRUE)
plot(NF.W2017.pair, limits=pair.range)
plot(NF.H2016.pair, limits=pair.range)
NF.W2017.pair <- pair.ia(popsub(NF, "NFW-2017"), quiet=T, plot=F)
NF.H2016.pair <- pair.ia(popsub(NF, "NFH-2016"), quiet=T, plot=F)
pair.range <- range(c(NF.W2017.pair, NF.H2016.pair), na.rm=TRUE)
plot(NF.W2017.pair, limits=pair.range, main="NFW-2017 Index of Association Pair Comparison")
plot(NF.H2016.pair, limits=pair.range, main="NFH-2016 Index of Association Pair Comparison")
NF.W2017.pair
NF.W2017.pair <- pair.ia(popsub(NF, "NFW-2017"), quiet=T, plot=F)
NF.H2016.pair <- pair.ia(popsub(NF, "NFH-2016"), quiet=T, plot=F)
pair.range <- range(c(NF.W2017.pair, NF.H2016.pair), na.rm=TRUE)
NF.W2017.pair <- pair.ia(popsub(NF, "NFW-2017"), quiet=F, plot=F)
NF.H2016.pair <- pair.ia(popsub(NF, "NFH-2016"), quiet=F, plot=F)
pair.range <- range(c(NF.W2017.pair, NF.H2016.pair), na.rm=TRUE)
NF.W2017.pair
plot(NF.W2017.pair, limits=pair.range, main="NFW-2017 Index of Association Pair Comparison")
NF.H2016.pair
plot(NF.H2016.pair, limits=pair.range, main="NFH-2016 Index of Association Pair Comparison")
NF.freq
NF.freq.t
View(NF.freq.t)
plot(NF.freq.t)
NF.freq <- rraf(NF, by_pop=TRUE)
NF.freq.t <- t(NF.freq)
plot(NF.freq.t)
NF.freq <- rraf(NF, by_pop=TRUE)
NF.freq.t <- t(NF.freq)
plot(NF.freq.t)
NF.freq.t
NF.freq <- rraf(NF, by_pop=TRUE)
NF.freq.t <- t(NF.freq)
NF.freq.t
plot(NF.freq.t)
knitr::opts_chunk$set(library("adegenet"))
knitr::opts_chunk$set(library("pegas"))
NF.summary <- summary(NF)
NFW.2017.summary <- summary(popsub(NF, "NFW-2017"))
NFW.2017.summary
plot(NFW.2017.summary$Hobs, xlab="Loci number", ylab="Observed Heterozygosity",
main="Observed heterozygosity per locus, NFW 2017")
plot(NFW.2017.summary$Hobs, NFW.2017.summary$Hexp, xlab="Observed Heterozygosity", ylab="Expected Heterozygosity",
main="Expected ~ Observed Heterozygosity per locus, NFW 2017")
bartlett.test(list(NFW.2017.summary$Hexp, NFW.2017.summary$Hobs)) #indicates no difference between mean observed and expected heterozygosity
NFH.2016.summary <- summary(popsub(NF, "NFH-2016"))
NFH.2016.summary
plot(NFH.2016.summary$Hobs, xlab="Loci number", ylab="Observed Heterozygosity",
main="Observed heterozygosity per locus, NFH 2016")
plot(NFH.2016.summary$Hobs, NFH.2016.summary$Hexp, xlab="Observed Heterozygosity", ylab="Expected Heterozygosity",
main="Expected ~ Observed Heterozygosity per locus, NFH 2016")
bartlett.test(list(NFH.2016.summary$Hexp, NFH.2016.summary$Hobs)) #indicates no difference between mean observed and expected heterozygosity
NF.summary <- summary(NF)
NFW.2017.summary <- summary(popsub(NF, "NFW-2017"))
NFW.2017.summary
plot(NFW.2017.summary$Hobs, xlab="Loci number", ylab="Observed Heterozygosity",
main="Observed heterozygosity per locus, NFW 2017")
plot(NFW.2017.summary$Hobs, NFW.2017.summary$Hexp, xlab="Observed Heterozygosity", ylab="Expected Heterozygosity",
main="Expected ~ Observed Heterozygosity per locus, NFW 2017")
bartlett.test(list(NFW.2017.summary$Hexp, NFW.2017.summary$Hobs)) #indicates no difference between mean observed and expected heterozygosity
NFH.2016.summary <- summary(popsub(NF, "NFH-2016"))
NFH.2016.summary
plot(NFH.2016.summary$Hobs, xlab="Loci number", ylab="Observed Heterozygosity",
main="Observed heterozygosity per locus, NFH 2016")
plot(NFH.2016.summary$Hobs, NFH.2016.summary$Hexp, xlab="Observed Heterozygosity", ylab="Expected Heterozygosity",
main="Expected ~ Observed Heterozygosity per locus, NFH 2016")
bartlett.test(list(NFH.2016.summary$Hexp, NFH.2016.summary$Hobs)) #indicates no difference between mean observed and expected heterozygosity
# I need the data as a normal dataframe, so I re-read the data into R as .csv
NF.csv <- read.csv(file="Data/Oly2016NFH+2017NFW_Merged.csv", stringsAsFactors = F)
names(NF.csv) <- NF.csv[2,]
NF.csv <- NF.csv[-1:-2,]
NFW.df <- subset(NF.csv, NF.csv$Population == "NFW-2017") #subset the wild pop
NFH.df <- subset(NF.csv, NF.csv$Population == "NFH-2016") #subset the hatchery pop
NFW.df.1 <- NFW.df[,-1:-2] #remove metadata
NFH.df.1 <- NFH.df[,-1:-2] #remove metadata
allelic.freq <- function(df) {
L=ncol(df)   #how many columns are there?
locus_positions=(2*(unique(round((1:(L-2))/2)))+1)   #find the starting column number for each locus
lnames=colnames(df)                          #locus names, from the header
OUT=list()        #create a null dataset to append allele freqs to
for (x in locus_positions) {                       #begin for loop, to calculate frequencies for each locus
alleles=c(df[,x],df[,x+1])        #For example, combine columns 1 and 2 for locus 1 (two columns because they are diploid)
alleles2=as.data.frame(table(alleles))             #count each allele at locus x
missing=alleles2[which(alleles2[,1]==0),2]          #count missing data at locus x, entered as '0' in this dataset (not used further for simplicity)
alleles3=alleles2[which(!alleles2[,1]==0),]          #remove missing data (otherwise 0 would be counted in total number of alleles)
alleles4=cbind(alleles3,alleles3[,2]/sum(alleles3[,2])) #calculate frequencies
output=cbind(x,lnames[x],alleles4)                        #combine x, locusname, and frequencies
OUT[[x]] <- output
}
OUT.1 <- do.call(rbind, OUT)
colnames(OUT.1) <- c("Number","Locus","allele","count","frequency") #add column headers
return(OUT.1)
}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(library(poppr))
# Import 2016/2017 microsatellite data
# Used the following reference: https://grunwaldlab.github.io/Population_Genetics_in_R/TOC.html
NFH.2016 <- read.genalex("Data/Oly2016NFH_Rounded.csv", ploidy=2) #read
NFW.2017 <- read.genalex("Data/Oly2017NFW_Rounded.csv", ploidy=2)
NF <- read.genalex("Data/Oly2016NFH+2017NFW_Merged.csv", ploidy=2)
summary(NFH.2016)
summary(NFW.2017) #summary of wild samples
summary(NF) #summary of hatchery and wild combined
info_table(NF, type="missing", plot=TRUE) #see how the missing data is distributed over the 2 populations
mlg.table(NF) #genotype eveness. Result is N=199; MLG=199
NF.pop <- poppr(NF) #summary stats on each population
NF.pop
(NF.pop$N / (NF.pop$N - 1)) * NF.pop$lambda #corrected simpson's index (N/(N-1)) #all different genotypes
library("pegas")
NF.HW <- seppop(NF) %>% lapply(hw.test, B=1000) #all P-values >0.05; reject the null that these populations are under HWE
NF.HW
NF.HW.P <- sapply(NF.HW, "[", i=TRUE, j=3) #pvalues of HW chi-squared test for all loci, both pops combined into a dataframe
NF.HW.P
library("magrittr")
NF.ia.H <- ia(popsub(NF, "NFH-2016"), sample=999)
NF.ia.H
NF.ia.W <- ia(popsub(NF, "NFW-2017"), sample=999)
NF.ia.W
NF.W2017.pair <- pair.ia(popsub(NF, "NFW-2017"), quiet=F, plot=F)
NF.H2016.pair <- pair.ia(popsub(NF, "NFH-2016"), quiet=F, plot=F)
pair.range <- range(c(NF.W2017.pair, NF.H2016.pair), na.rm=TRUE)
NF.W2017.pair
plot(NF.W2017.pair, limits=pair.range, main="NFW-2017 Index of Association Pair Comparison")
NF.H2016.pair
plot(NF.H2016.pair, limits=pair.range, main="NFH-2016 Index of Association Pair Comparison")
NF.freq <- rraf(NF, by_pop=TRUE)
NF.freq.t <- t(NF.freq)
NF.freq.t
plot(NF.freq.t)
knitr::opts_chunk$set(library("adegenet"))
knitr::opts_chunk$set(library("pegas"))
NF.summary <- summary(NF)
NFW.2017.summary <- summary(popsub(NF, "NFW-2017"))
NFW.2017.summary
plot(NFW.2017.summary$Hobs, xlab="Loci number", ylab="Observed Heterozygosity",
main="Observed heterozygosity per locus, NFW 2017")
plot(NFW.2017.summary$Hobs, NFW.2017.summary$Hexp, xlab="Observed Heterozygosity", ylab="Expected Heterozygosity",
main="Expected ~ Observed Heterozygosity per locus, NFW 2017")
bartlett.test(list(NFW.2017.summary$Hexp, NFW.2017.summary$Hobs)) #indicates no difference between mean observed and expected heterozygosity
NFH.2016.summary <- summary(popsub(NF, "NFH-2016"))
NFH.2016.summary
plot(NFH.2016.summary$Hobs, xlab="Loci number", ylab="Observed Heterozygosity",
main="Observed heterozygosity per locus, NFH 2016")
plot(NFH.2016.summary$Hobs, NFH.2016.summary$Hexp, xlab="Observed Heterozygosity", ylab="Expected Heterozygosity",
main="Expected ~ Observed Heterozygosity per locus, NFH 2016")
bartlett.test(list(NFH.2016.summary$Hexp, NFH.2016.summary$Hobs)) #indicates no difference between mean observed and expected heterozygosity
# I need the data as a normal dataframe, so I re-read the data into R as .csv
NF.csv <- read.csv(file="Data/Oly2016NFH+2017NFW_Merged.csv", stringsAsFactors = F)
names(NF.csv) <- NF.csv[2,]
NF.csv <- NF.csv[-1:-2,]
NFW.df <- subset(NF.csv, NF.csv$Population == "NFW-2017") #subset the wild pop
NFH.df <- subset(NF.csv, NF.csv$Population == "NFH-2016") #subset the hatchery pop
NFW.df.1 <- NFW.df[,-1:-2] #remove metadata
NFH.df.1 <- NFH.df[,-1:-2] #remove metadata
allelic.freq <- function(df) {
L=ncol(df)   #how many columns are there?
locus_positions=(2*(unique(round((1:(L-2))/2)))+1)   #find the starting column number for each locus
lnames=colnames(df)                          #locus names, from the header
OUT=list()        #create a null dataset to append allele freqs to
for (x in locus_positions) {                       #begin for loop, to calculate frequencies for each locus
alleles=c(df[,x],df[,x+1])        #For example, combine columns 1 and 2 for locus 1 (two columns because they are diploid)
alleles2=as.data.frame(table(alleles))             #count each allele at locus x
missing=alleles2[which(alleles2[,1]==0),2]          #count missing data at locus x, entered as '0' in this dataset (not used further for simplicity)
alleles3=alleles2[which(!alleles2[,1]==0),]          #remove missing data (otherwise 0 would be counted in total number of alleles)
alleles4=cbind(alleles3,alleles3[,2]/sum(alleles3[,2])) #calculate frequencies
output=cbind(x,lnames[x],alleles4)                        #combine x, locusname, and frequencies
OUT[[x]] <- output
}
OUT.1 <- do.call(rbind, OUT)
colnames(OUT.1) <- c("Number","Locus","allele","count","frequency") #add column headers
return(OUT.1)
}
NFH.afreq <- allelic.freq(NFW.df.1)[,-1]
NFW.afreq <- allelic.freq(NFH.df.1)[,-1]
write.table(NFH.afreq,file="Analyses/NFH-2016-Allelefrequencies.txt",row.names=FALSE,col.names=TRUE,sep="\t",append=FALSE)
write.table(NFW.afreq,file="Analyses/NFW-2017-Allelefrequencies.txt",row.names=FALSE,col.names=TRUE,sep="\t",append=FALSE)
Freq.Plots <- function(wanted_locus, frequency_table, population) {
Locus=frequency_table[which(frequency_table[,1]==wanted_locus),]
plot(as.numeric(as.character(Locus[,2])),as.numeric(as.character(Locus[,4])),xlab="Allele",ylab="Frequency",main=paste(population, "_", "Locus_",Locus[1,1]),pch=21,bg="blue",cex=1.5)
plot(1:length(Locus[,2]),sort(as.numeric(as.character(Locus[,4])),decreasing=TRUE),xlab="Allele (orderd by frequency)",ylab="Frequency",main=paste(population, "_", "Locus_",Locus[1,1], sep=""),pch=21,bg="blue",cex=1.5)
}
# Generate plots for NFH-2016 population
loci <- unique(NFH.afreq$Locus)
for (i in 1:length(loci)) {
path <- file.path(paste("Analyses/", "FreqPlots_NFH-2016_", loci[i], ".pdf", sep = ""))
pdf(file=path)
Freq.Plots(loci[i], NFH.afreq, "NFH-2016")
dev.off()
}
Freq.Plots(loci[i], NFH.afreq, "NFH-2016")
# Generate plots for NFH-2016 population
loci <- unique(NFH.afreq$Locus)
for (i in 1:length(loci)) {
path <- file.path(paste("Analyses/", "FreqPlots_NFH-2016_", loci[i], ".pdf", sep = ""))
pdf(file=path)
Freq.Plots(loci[i], NFH.afreq, "NFH-2016")
dev.off()
}
# Here are example plots:
Freq.Plots("Olur19", NFH.afreq, "NFH-2016")
# Generate plots for NFW-2017 population
loci <- unique(NFW.afreq$Locus)
for (i in 1:length(loci)) {
path <- file.path(paste("Analyses/", "FreqPlots_NFW-2017_", loci[i], ".pdf", sep = ""))
pdf(file=path)
Freq.Plots(loci[i], NFW.afreq, "NFW-2017")
dev.off()
}
# Here are example plots:
Freq.Plots("Olur19", NFW.afreq, "NFW-2017")
